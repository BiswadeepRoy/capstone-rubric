const http = require('http');
const express = require('express');
const merge = require('deepmerge');
const log = require('webpack-log');
const features = require('./features');

const signals = ['SIGINT', 'SIGTERM'];

const defaultConfig = {
  mode: 'development',
  port: 8000,
  featuresOrder: {
    compression: 0,
    cookies: 1,
    body: 2,
    session: 3,
    middlewares: 4,
    static: 99,
  },
  logger: {
    name: 'wps'
  },
};

module.exports = function (config) {
  const options = merge(defaultConfig, config);
  const logger = log(options.logger);
  const app = express();
  const server = http.createServer(app);

  server.on('error', err => {
    logger.error(err);
  });

  server.on('listening', () => {
    logger.info('environment:', options.mode);
    logger.info(`http://localhost:${options.port}`);
    process.send ? process.send('ready') : null;

    app._router.stack.map(item => {
      item.route &&
      Object.keys(item.route.methods).map(method => {
        logger.info(
          'endpoint:',
          method.toUpperCase(),
          `http://localhost:${options.port}${item.route.path}`
        );
      });
    });
  });

  Object.keys(options)
    .sort((a, b) => options.featuresOrder[a] > options.featuresOrder[b])
    .map(key => {
      if (features[key]) {
        logger.info('feature:', key);
        features[key](options[key], app, server, logger);
      }
    });

  server.listen(options.port);

  signals.map(signal => {
    process.on(signal, msg => {
      logger.error(msg, 'signal received');
      if (server) {
        server.close(err => {
          if (err) {
            logger.error(err);
            process.exit(1);
          } else {
            process.exit(0);
          }
        });
      } else {
        process.exit(0);
      }
    });
  });

  return this;
};
